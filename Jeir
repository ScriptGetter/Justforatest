-- Load the GUI library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()

-- Create the Loading Screen GUI
local Player = game.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Create the ScreenGui for the loading screen
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = PlayerGui

-- Create the Background Frame (The loading screen itself)
local BackgroundFrame = Instance.new("Frame")
BackgroundFrame.Size = UDim2.new(1, 0, 1, 0)
BackgroundFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
BackgroundFrame.BackgroundTransparency = 0.5
BackgroundFrame.Parent = ScreenGui

-- Create the Loading Text
local LoadingText = Instance.new("TextLabel")
LoadingText.Size = UDim2.new(1, 0, 0.1, 0)
LoadingText.Position = UDim2.new(0, 0, 0.4, 0)
LoadingText.Text = "Loading... Please Wait"
LoadingText.TextSize = 30
LoadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadingText.BackgroundTransparency = 1
LoadingText.Parent = BackgroundFrame

-- Create the Loading Bar (Progress bar)
local ProgressBarBackground = Instance.new("Frame")
ProgressBarBackground.Size = UDim2.new(0.6, 0, 0.05, 0)
ProgressBarBackground.Position = UDim2.new(0.2, 0, 0.6, 0)
ProgressBarBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProgressBarBackground.Parent = BackgroundFrame

local ProgressBar = Instance.new("Frame")
ProgressBar.Size = UDim2.new(0, 0, 1, 0)  -- Start with a width of 0
ProgressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
ProgressBar.Parent = ProgressBarBackground

-- Cool URL for the notification icon
local coolIconURL = "https://i.imgur.com/Xy4bVjr.png"  -- Your custom icon URL

-- Function to send a custom notification
local function sendCustomNotification(title, text, duration)
    -- Customize the notification with the cool icon
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title;
        Text = text;
        Icon = coolIconURL;  -- Using the custom icon URL
        Duration = duration or 3;  -- Default to 3 seconds if no duration is specified
    })
end

-- Function to simulate loading progress for 5 seconds
local function simulateLoadingProgress()
    local loadingTime = 5  -- Set loading duration to 5 seconds
    local startTime = tick()  -- Capture start time

    -- Update the progress bar over time
    while tick() - startTime < loadingTime do
        local elapsedTime = tick() - startTime
        local progress = elapsedTime / loadingTime
        ProgressBar.Size = UDim2.new(progress, 0, 1, 0)
        wait(0.1)
    end

    -- After loading is complete, remove the loading screen
    ScreenGui:Destroy()
end

-- Check if the player is fully loaded (this could include checking if the character has loaded, etc.)
local function waitForPlayerData()
    -- Wait until the character is fully loaded
    if not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") then
        Player.CharacterAdded:Wait()  -- Wait for the character to load if not already
    end

    -- You can add more data checks here if needed, like:
    -- 1. Waiting for specific player data to load (leaderstats, etc.)
    -- 2. Checking if assets or maps are loaded (if required)

    -- After character is loaded, simulate loading progress
    simulateLoadingProgress()
end

-- Start the loading screen process
waitForPlayerData()
